#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set PREHEAT_EXTRUDER_TEMP = params.PREHEAT_EXTRUDER_TEMP|default(175)|float %}
    {% set max_velocity = printer.toolhead.max_velocity %}

    SFS_ENABLE
    SET_GCODE_OFFSET Z=0
    #SET_PIN PIN=caselight VALUE=0.1
    #SET_LED LED=headlight GREEN=0 BLUE=0 RED=1
    status_heating

    M107 ; turn off fan
    M220 S100 ; set speed to 100%

    G21 ; set units to millimeters
    G90 ; use absolute positioning
    M82 ; absolute extrusion mode

    M117 Preheating...

    M140 S{BED_TEMP} ; set bed temp
    M190 S{BED_TEMP} ; wait for bed temp
    M104 S{PREHEAT_EXTRUDER_TEMP} ; set extruder temp
    M109 S{PREHEAT_EXTRUDER_TEMP} ; wait for extruder temp

    status_homing
    M117 Homing & Cleaning
    G28; home

    CLEAN_NOZZLE
    G28 Z

    status_leveling
    QUAD_GANTRY_LEVEL
    CLEAN_NOZZLE
    G28 Z

    status_meshing
    M117 Mesh bed leveling...

    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
    SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 TIP_DISTANCE=11 DISTANCE_TO_OBJECT_X=20 DISTANCE_TO_OBJECT_Y=20

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE

    M117 Preparing for print...
    #G1 X3 Y3 Z1 F4000.0 ; goto start position for line

    status_heating
    M117 Heating extruder...
    M109 S{EXTRUDER_TEMP} ; set and wait for extruder temp

    #SET_GCODE_OFFSET Z_ADJUST=0.315
    _SET_PLATE_OFFSET MOVE=1
    _APPLY_PRESSURE_ADVANCE
    M221 S100 ; Set flow to 100

    SET_VELOCITY_LIMIT VELOCITY=200
    VORON_PURGE
    SET_VELOCITY_LIMIT VELOCITY={max_velocity}

    G92 E0.0 ; reset extruder distance position
    #SET_LED LED=headlight GREEN=1 BLUE=1 RED=1
    status_printing

[gcode_macro PRIME_NOZZLE] 
gcode: 
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE 
    
    M117 Priming 
    M83 ; Relative extruder mode. 
    G92 E0 ; Move to start of line. 
    G1 Y3 X3 F18000 
    G1 Z0.2 F900 ; Print the line. 
    G91 ; Relative coordinates. 
    G1 X100 E25 F1000 ; Extrude filament 25mm (how much it retracted in PRINT_END). 
    G1 Y-2 F1000 
    G1 X-60 E9 F1000 ; Print second part of the line. 
    G1 E-0.5 F3000 ; Retract to avoid stringing. 
    G1 X0.5 E0 F1000 ; Wipe back to break string. 
    G1 X-5.5 E0 F1000 ; Wipe forward to break string. 
    G1 Z1 F3000 ; lift nozzle a bit

    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 30, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    SFS_DISABLE
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-9.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    status_part_ready
    #SET_LED LED=headlight GREEN=1 BLUE=0 RED=0

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro PARKING_POSITION]
gcode:
  	{% set RAISE_Z_MIN_POSITION = params.RAISE_Z_MIN_POSITION|default(50)|float %}
  	{% set RAISE_Z_DISTANCE = params.RAISE_Z_DISTANCE|default(40)|float %}
  	{% set Z_SPEED = params.Z_SPEED|default(600)|float %}
  	{% set XY_SPEED = params.XY_SPEED|default(4500)|float %}
  	{% set PARKING_POSITION_X = params.PARKING_POSITION_X|default(3)|float %}
  	{% set PARKING_POSITION_Y = params.PARKING_POSITION_Y|default(3)|float %}

    {% set MAX_Z = (printer.configfile.config["stepper_z"]["position_max"] | min) %}

    {% if 'z' in printer.toolhead.homed_axes %}
        G90 ; Absolute positioning

        # Go to Z parking position
        {% if printer.gcode_move.gcode_position.z < MAX_Z %}
            M117 PARKING_POSITION: Z position in known, raising Z...

            # Raise Z
            {% if printer.gcode_move.gcode_position.z > RAISE_Z_MIN_POSITION %}
                {% set new_z_pos = ([(printer.gcode_move.gcode_position.z + (RAISE_Z_DISTANCE | float) ), MAX_Z] | min) %}
                M117 PARKING_POSITION: Z axis was below MAX_Z, raising to {new_z_pos}
                G1 Z{new_z_pos} F{Z_SPEED}
            {% else %}
                {% set new_z_pos = ([([(printer.gcode_move.gcode_position.z + (RAISE_Z_DISTANCE | float)), (RAISE_Z_MIN_POSITION | float) ] | max), MAX_Z] | min) %}
                M117 PARKING_POSITION: Z axis was below MAX_Z, raising to {new_z_pos}
                G1 Z{new_z_pos} F{Z_SPEED}
            {% endif %}
        {% endif %}
    {% else %}
        M117 PARKING_POSITION: Z position is unknown, raising not possible
    {% endif %}

    {% if ('x' in printer.toolhead.homed_axes) and ('y' in printer.toolhead.homed_axes) %}
        # Go to XY parking position
        G1 X{PARKING_POSITION_X} Y{PARKING_POSITION_Y} F{XY_SPEED}
    {% else %}
        M117 PARKING_POSITION: X and/or Y position is unknown, parking not possible
    {% endif %}
